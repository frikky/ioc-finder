{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"IOC Finder \u00b6 Welcome to the documentation for the ioc-finder library - a library to find different types of indicators of compromise (a.k.a observables) and data pertinent to indicators of compromise! \ud83d\udce2 Announcement : I'm looking for sponsorship for this project. I have a number of improvements and helpful features I'd like to add, but need some support to continue working on this project. If you use this project for work and/or find it useful, please consider contributing even a small amount. Thanks! Overview (INTERACTIVE!) \u00b6 Copy this example and paste it in the terminal below to get an idea of what this package does: from ioc_finder import find_iocs text = \"This is just an foobar.com https://example.org/test/bingo.php\" iocs = find_iocs ( text ) iocs [ 'domains' ] iocs [ 'urls' ] This terminal uses Pyodide to provide a Python3.9 runtime in the browser using WebAssembly . Enjoy! Capabilities \u00b6 Data types found by ioc-finder Autonomous System Numbers (ASNs) (in multiple formats such as asn1234 and as 1234 ) Bitcoin addresses (P2PKH, P2SH, and Bech32) CIDR ranges (currently ipv4 ranges; ipv6 ranges coming soon) CVEs (e.g. CVE-2014-1234 ) Domain names (support for Unicode domain names (e.g. \u0229xample.com ) is coming soon) Email addresses (both standard format (e.g. test@example.com ) and an email with an IP address as the domain (e.g. test@[192.168.0.1] )) File hashes (md5, sha1, sha256, sha512, and import hashes , and authentihashes ) File paths ( beta ) Google Adsense Publisher IDs Google Analytics Tracker IDs IP address (IPv4 and IPv6) MAC addresses ( beta ) Monero (crypto-currency) addresses Registry key paths (e.g. \"HKEY_LOCAL_MACHINE\\Software\\Microsoft\\Windows ) SSDeep hashes ( beta ) URLs (URLs with and without schemes) User agents ( beta ) XMPP addresses (basically, this captures email addresses whose domain names contain \"jabber\" or \"xmpp\") MITRE ATT&CK data (see more info ): Pre-attack tactics and techniques (and sub-techniques ) Enterprise mitigations, tactics, and techniques (and sub-techniques ) Mobile mitigations, tactics, and techniques (and sub-techniques ) TLP labels Have another data-type you would like ioc-finder to parse? Raise an issue and we'll see what we can do! Configuration Options This library also provides options to: Parse domain name from a URL Parse domain name from an email address Parse IP address from a CIDR range Parse URLs without a scheme (e.g. without https:// ) Parse import hashes and authentihashes Known Limitations When parsing registry key paths , this library will NOT properly parse a registry key path where the last section contains a space. For example, <HKCU>\\software\\microsoft\\windows\\currentversion\\explorer\\advanced on will be parsed as <HKCU>\\software\\microsoft\\windows\\currentversion\\explorer\\advanced (the space in the final section is removed). The items listed above (in the \"Capabilities\" section) that are postceded by \"( beta )\" are not very robust and may still have major issues. Any feedback or issues related to these items are much appreciated. When parsing markdown , if there is a domain name that is surrounded by underscores (which would make the domain name italic in some flavours of markdown - e.g. _google.com_ ), the domain will be parsed including the leading underscore (e.g. _google.com_ would be parsed as _google.com ). Feedback \u00b6 If you have any ideas to improve this package, please raise an issue ! Other Helpful Projects \u00b6 You may also be interested in https://github.com/ioc-fang/ioc_fanger , a project to fang and defang indicators of compromise. For example, defanging: example.com => example[.]com https://example.com => hXXps://example[.]com and fanging: example[.]com => example.com example(.)com => example.com me AT example(.)com => me@example.com Similar Projects \u00b6 There are a number of projects available to find Indicators of Compromise. Your mileage may vary with them. If there are things that another package can do that you would like to see in this package, let me know ). Here are a few other ones: https://github.com/InQuest/python-iocextract https://github.com/sroberts/cacador https://github.com/armbues/ioc_parser Credits \u00b6 This project uses the ioc_fanger package to make sure that all indicators in the text are properly fanged . This package was created with Cookiecutter and Floyd Hightower's python-project-template project template.","title":"Home"},{"location":"#ioc-finder","text":"Welcome to the documentation for the ioc-finder library - a library to find different types of indicators of compromise (a.k.a observables) and data pertinent to indicators of compromise! \ud83d\udce2 Announcement : I'm looking for sponsorship for this project. I have a number of improvements and helpful features I'd like to add, but need some support to continue working on this project. If you use this project for work and/or find it useful, please consider contributing even a small amount. Thanks!","title":"IOC Finder"},{"location":"#overview-interactive","text":"Copy this example and paste it in the terminal below to get an idea of what this package does: from ioc_finder import find_iocs text = \"This is just an foobar.com https://example.org/test/bingo.php\" iocs = find_iocs ( text ) iocs [ 'domains' ] iocs [ 'urls' ] This terminal uses Pyodide to provide a Python3.9 runtime in the browser using WebAssembly . Enjoy!","title":"Overview (INTERACTIVE!)"},{"location":"#capabilities","text":"Data types found by ioc-finder Autonomous System Numbers (ASNs) (in multiple formats such as asn1234 and as 1234 ) Bitcoin addresses (P2PKH, P2SH, and Bech32) CIDR ranges (currently ipv4 ranges; ipv6 ranges coming soon) CVEs (e.g. CVE-2014-1234 ) Domain names (support for Unicode domain names (e.g. \u0229xample.com ) is coming soon) Email addresses (both standard format (e.g. test@example.com ) and an email with an IP address as the domain (e.g. test@[192.168.0.1] )) File hashes (md5, sha1, sha256, sha512, and import hashes , and authentihashes ) File paths ( beta ) Google Adsense Publisher IDs Google Analytics Tracker IDs IP address (IPv4 and IPv6) MAC addresses ( beta ) Monero (crypto-currency) addresses Registry key paths (e.g. \"HKEY_LOCAL_MACHINE\\Software\\Microsoft\\Windows ) SSDeep hashes ( beta ) URLs (URLs with and without schemes) User agents ( beta ) XMPP addresses (basically, this captures email addresses whose domain names contain \"jabber\" or \"xmpp\") MITRE ATT&CK data (see more info ): Pre-attack tactics and techniques (and sub-techniques ) Enterprise mitigations, tactics, and techniques (and sub-techniques ) Mobile mitigations, tactics, and techniques (and sub-techniques ) TLP labels Have another data-type you would like ioc-finder to parse? Raise an issue and we'll see what we can do! Configuration Options This library also provides options to: Parse domain name from a URL Parse domain name from an email address Parse IP address from a CIDR range Parse URLs without a scheme (e.g. without https:// ) Parse import hashes and authentihashes Known Limitations When parsing registry key paths , this library will NOT properly parse a registry key path where the last section contains a space. For example, <HKCU>\\software\\microsoft\\windows\\currentversion\\explorer\\advanced on will be parsed as <HKCU>\\software\\microsoft\\windows\\currentversion\\explorer\\advanced (the space in the final section is removed). The items listed above (in the \"Capabilities\" section) that are postceded by \"( beta )\" are not very robust and may still have major issues. Any feedback or issues related to these items are much appreciated. When parsing markdown , if there is a domain name that is surrounded by underscores (which would make the domain name italic in some flavours of markdown - e.g. _google.com_ ), the domain will be parsed including the leading underscore (e.g. _google.com_ would be parsed as _google.com ).","title":"Capabilities"},{"location":"#feedback","text":"If you have any ideas to improve this package, please raise an issue !","title":"Feedback"},{"location":"#other-helpful-projects","text":"You may also be interested in https://github.com/ioc-fang/ioc_fanger , a project to fang and defang indicators of compromise. For example, defanging: example.com => example[.]com https://example.com => hXXps://example[.]com and fanging: example[.]com => example.com example(.)com => example.com me AT example(.)com => me@example.com","title":"Other Helpful Projects"},{"location":"#similar-projects","text":"There are a number of projects available to find Indicators of Compromise. Your mileage may vary with them. If there are things that another package can do that you would like to see in this package, let me know ). Here are a few other ones: https://github.com/InQuest/python-iocextract https://github.com/sroberts/cacador https://github.com/armbues/ioc_parser","title":"Similar Projects"},{"location":"#credits","text":"This project uses the ioc_fanger package to make sure that all indicators in the text are properly fanged . This package was created with Cookiecutter and Floyd Hightower's python-project-template project template.","title":"Credits"},{"location":"development/","text":"Development Guide \ud83d\udc33 \u00b6 This page shows you how to test, lint, and explore the ioc-finder. As always, if you have feedback, please raise an issue and we'll be happy to improve our docs. Thanks! Prerequisites \u00b6 If you want to test, lint, or explore ioc-finder, make sure you have docker and docker-compose installed (if you don't see: installing docker ). Then you can use the test , lint , and dev docker compose services listed below! Test ioc-finder \ud83e\uddea \u00b6 To test ioc-finder, run the following command from the root directory of the project: docker-compose run --rm test Typically, this command will run pytest on the project's test suite. To view the details of what this command does, take a look at the test service in the project's docker-compose.yml file. Understanding our Testing Framework \u00b6 There are two types of tests in the ioc-finder/tests/ directory: Standard tests in test_*.py files Tests run by ioc-finder/tests/test_find_iocs.py In this section of the documentation, we'll discuss the second set of tests (those run by ioc-finder/tests/test_find_iocs.py ). In the ioc-finder/tests/find_iocs_cases dir, there are files which define test cases with an input and expected output for different types of observables (a.k.a. indicators). A test case is a pytest.param object that takes these arguments: The input to the ioc_finder.find_iocs function (a string) The expected output from the ioc_finder.find_iocs function (a dict) ( Optional ) Kwargs for the ioc_finder.find_iocs function (a dict) The id kwarg providing a name for the test (a string) An example looks like: from pytest import param param ( 'as1234' , { 'asns' : [ 'ASN1234' ]}, {}, id = \"asn_1\" ) ioc-finder/tests/test_find_iocs.py collects data from the ioc-finder/tests/find_iocs_cases/ dir and runs tests to make sure the find_iocs function returns the expected data. Lint ioc-finder \ud83e\uddf9 \u00b6 To lint ioc-finder, run the following command from the root directory of the project: docker-compose run --rm lint Typically, this command will run a number of linters on the project's code with the goal of improving code qality and catching bugs before they are released (you can read more about the benefits of linting here ). To view the details of what this command does, take a look at the lint service in the project's docker-compose.yml file. Explore ioc-finder \ud83d\udd2d \u00b6 To explore ioc-finder, you can drop into a \"dev\" environment which is an IPython shell with the project and all its requirements loaded. To do this, run the following command from the root directory of the project: docker-compose run --rm dev To see what this command does, take a look at the dev service in the project's docker-compose.yml file. Run Docs Locally \ud83d\udcd6 \u00b6 To view the docs for ioc-finder locally, run the following command from the root directory of the project: docker-compose run --rm mkdocs This will serve the documentation at http://localhost:8000 . Questions? Please Ask! \u00b6 If you have any follow-up questions, don't hesitate to ask! It takes practice to understand how to contribute to open-source software, so there is no shame in asking for help.","title":"Developer Docs"},{"location":"development/#development-guide","text":"This page shows you how to test, lint, and explore the ioc-finder. As always, if you have feedback, please raise an issue and we'll be happy to improve our docs. Thanks!","title":"Development Guide \ud83d\udc33"},{"location":"development/#prerequisites","text":"If you want to test, lint, or explore ioc-finder, make sure you have docker and docker-compose installed (if you don't see: installing docker ). Then you can use the test , lint , and dev docker compose services listed below!","title":"Prerequisites"},{"location":"development/#test-ioc-finder","text":"To test ioc-finder, run the following command from the root directory of the project: docker-compose run --rm test Typically, this command will run pytest on the project's test suite. To view the details of what this command does, take a look at the test service in the project's docker-compose.yml file.","title":"Test ioc-finder \ud83e\uddea"},{"location":"development/#understanding-our-testing-framework","text":"There are two types of tests in the ioc-finder/tests/ directory: Standard tests in test_*.py files Tests run by ioc-finder/tests/test_find_iocs.py In this section of the documentation, we'll discuss the second set of tests (those run by ioc-finder/tests/test_find_iocs.py ). In the ioc-finder/tests/find_iocs_cases dir, there are files which define test cases with an input and expected output for different types of observables (a.k.a. indicators). A test case is a pytest.param object that takes these arguments: The input to the ioc_finder.find_iocs function (a string) The expected output from the ioc_finder.find_iocs function (a dict) ( Optional ) Kwargs for the ioc_finder.find_iocs function (a dict) The id kwarg providing a name for the test (a string) An example looks like: from pytest import param param ( 'as1234' , { 'asns' : [ 'ASN1234' ]}, {}, id = \"asn_1\" ) ioc-finder/tests/test_find_iocs.py collects data from the ioc-finder/tests/find_iocs_cases/ dir and runs tests to make sure the find_iocs function returns the expected data.","title":"Understanding our Testing Framework"},{"location":"development/#lint-ioc-finder","text":"To lint ioc-finder, run the following command from the root directory of the project: docker-compose run --rm lint Typically, this command will run a number of linters on the project's code with the goal of improving code qality and catching bugs before they are released (you can read more about the benefits of linting here ). To view the details of what this command does, take a look at the lint service in the project's docker-compose.yml file.","title":"Lint ioc-finder \ud83e\uddf9"},{"location":"development/#explore-ioc-finder","text":"To explore ioc-finder, you can drop into a \"dev\" environment which is an IPython shell with the project and all its requirements loaded. To do this, run the following command from the root directory of the project: docker-compose run --rm dev To see what this command does, take a look at the dev service in the project's docker-compose.yml file.","title":"Explore ioc-finder \ud83d\udd2d"},{"location":"development/#run-docs-locally","text":"To view the docs for ioc-finder locally, run the following command from the root directory of the project: docker-compose run --rm mkdocs This will serve the documentation at http://localhost:8000 .","title":"Run Docs Locally \ud83d\udcd6"},{"location":"development/#questions-please-ask","text":"If you have any follow-up questions, don't hesitate to ask! It takes practice to understand how to contribute to open-source software, so there is no shame in asking for help.","title":"Questions? Please Ask!"},{"location":"quick-start/","text":"Installation \u00b6 The recommended means of installation is using pip : pip install ioc-finder Alternatively, you can install ioc-finder as follows: git clone git@github.com:fhightower/ioc-finder.git && cd ioc-finder ; python setup.py install --user ; Usage \u00b6 This package can be used in python or via a command-line interface . Python \u00b6 The primary function in this package is the ioc_finder.find_iocs() function. A simple usage looks like: from ioc_finder import find_iocs text = \"This is just an example.com https://example.org/test/bingo.php\" iocs = find_iocs ( text ) print ( 'Domains: {} ' . format ( iocs [ 'domains' ])) print ( 'URLs: {} ' . format ( iocs [ 'urls' ])) Inputs \u00b6 You must pass some text into the find_iocs() function as string (the iocs will be parsed from this text). You can also provide the options detailed below. Options \u00b6 The find_iocs takes the following keywords (all of them default to True ): parse_domain_from_url (default=True): Whether or not to parse domain names from URLs (e.g. example.com from https://example.com/test ) parse_from_url_path (default=True): Whether or not to parse observables from URL paths (e.g. 2f3ec0e4998909bb0efab13c82d30708ca9f88679e42b75ef13ea0466951d862 from https://www.virustotal.com/gui/file/2f3ec0e4998909bb0efab13c82d30708ca9f88679e42b75ef13ea0466951d862/detection ) parse_domain_from_email_address (default=True): Whether or not to parse domain names from email addresses (e.g. example.com from foo@example.com ) parse_address_from_cidr (default=True): Whether or not to parse IP addresses from CIDR ranges (e.g. 0.0.0.1 from 0.0.0.1/24 ) parse_urls_without_scheme (default=True): Whether or not to parse URLs without a scheme (see https://en.wikipedia.org/wiki/Uniform_Resource_Identifier#Generic_syntax ) (e.g. hightower.space/projects ) parse_imphashes (default=True): Parse import hashes (which look like md5s, but are preceded by 'imphash' or 'import hash') parse_authentihashes (default=True): Parse authentihashes (which look like sha256s, but are preceded with 'authentihash') See test_ioc_finder.py for more examples. Output \u00b6 The find_iocs() returns a dictionary in the following structure: { \"asns\" : [], \"attack_mitigations\" : { \"enterprise\" : [], \"mobile\" : [] }, \"attack_tactics\" : { \"enterprise\" : [], \"mobile\" : [], \"pre_attack\" : [] }, \"attack_techniques\" : { \"enterprise\" : [], \"mobile\" : [], \"pre_attack\" : [] }, \"authentihashes\" : [], \"bitcoin_addresses\" : [], \"cves\" : [], \"domains\" : [], \"email_addresses\" : [], \"email_addresses_complete\" : [], \"file_paths\" : [], \"google_adsense_publisher_ids\" : [], \"google_analytics_tracker_ids\" : [], \"imphashes\" : [], \"ipv4_cidrs\" : [], \"ipv4s\" : [], \"ipv6s\" : [], \"mac_addresses\" : [], \"md5s\" : [], \"monero_addresses\" : [], \"registry_key_paths\" : [], \"sha1s\" : [], \"sha256s\" : [], \"sha512s\" : [], \"ssdeeps\" : [], \"tlp_labels\" : [], \"urls\" : [], \"user_agents\" : [], \"xmpp_addresses\" : [] } For example, running the example code shown at the start of the usage section above produces the following output: { \"asns\" : [], \"attack_mitigations\" : { \"enterprise\" : [], \"mobile\" : [] }, \"attack_tactics\" : { \"enterprise\" : [], \"mobile\" : [], \"pre_attack\" : [] }, \"attack_techniques\" : { \"enterprise\" : [], \"mobile\" : [], \"pre_attack\" : [] }, \"authentihashes\" : [], \"bitcoin_addresses\" : [], \"cves\" : [], \"domains\" : [ \"example.org\" , \"example.com\" ], \"email_addresses\" : [], \"email_addresses_complete\" : [], \"file_paths\" : [], \"google_adsense_publisher_ids\" : [], \"google_analytics_tracker_ids\" : [], \"imphashes\" : [], \"ipv4_cidrs\" : [], \"ipv4s\" : [], \"ipv6s\" : [], \"mac_addresses\" : [], \"md5s\" : [], \"monero_addresses\" : [], \"registry_key_paths\" : [], \"sha1s\" : [], \"sha256s\" : [], \"sha512s\" : [], \"ssdeeps\" : [], \"tlp_labels\" : [], \"urls\" : [ \"https://example.org/test/bingo.php\" ], \"user_agents\" : [], \"xmpp_addresses\" : [] } Output Details \u00b6 There are two grammars for email addresses. There is a fairly complete grammar to find email addresses matching the spec (which is very broad). Any of these complete email addresses (e.g. foo\"bar@gmail.com ) will be sent as output to in email_addresses_complete key. Email addresses in the simple form we are familiar with (e.g. bar@gmail.com ) will be sent as output in the email_addresses key. Parsing Specific Indicator Types \u00b6 If you need to parse a specific indicator type, you can do this using one of the parse functions that start with parse_ . For example, the code below will parse URLs: from ioc_finder import parse_urls text = 'https://google.com' results = parse_urls ( prepare_text ( text )) print ( results ) If you use a parse function for a specific indicator type, we recommend that you first call the prepare_text function which fangs (e.g. hXXps://example[.]com => https://example.com ) the text before parsing indicators from it. In the future, more functionality will be added to the prepare_text function making it advantageous to call this function before parsing indicators. Command-Line Interface \u00b6 The ioc-finder package can be used from a command line like: ioc-finder \"This is just an example.com https://example.org/test/bingo.php\" This will return: { \"asns\" : [], \"attack_mitigations\" : { \"enterprise\" : [], \"mobile\" : [] }, \"attack_tactics\" : { \"enterprise\" : [], \"mobile\" : [], \"pre_attack\" : [] }, \"attack_techniques\" : { \"enterprise\" : [], \"mobile\" : [], \"pre_attack\" : [] }, \"authentihashes\" : [], \"bitcoin_addresses\" : [], \"cves\" : [], \"domains\" : [ \"example.com\" , \"example.org\" ], \"email_addresses\" : [], \"email_addresses_complete\" : [], \"file_paths\" : [], \"google_adsense_publisher_ids\" : [], \"google_analytics_tracker_ids\" : [], \"imphashes\" : [], \"ipv4_cidrs\" : [], \"ipv4s\" : [], \"ipv6s\" : [], \"mac_addresses\" : [], \"md5s\" : [], \"monero_addresses\" : [], \"registry_key_paths\" : [], \"sha1s\" : [], \"sha256s\" : [], \"sha512s\" : [], \"ssdeeps\" : [], \"tlp_labels\" : [], \"urls\" : [ \"https://example.org/test/bingo.php\" ], \"user_agents\" : [], \"xmpp_addresses\" : [] } Here are the usage instructions for the CLI: Usage: ioc-finder [OPTIONS] TEXT CLI interface for parsing indicators of compromise. Options: --no_url_domain_parsing Using this flag will not parse domain names from URLs --no_email_addr_domain_parsing Using this flag will not parse domain names from email addresses --no_cidr_address_parsing Using this flag will not parse IP addresses from CIDR ranges --no_xmpp_addr_domain_parsing Using this flag will not parse domain names from XMPP addresses --help Show this message and exit.","title":"Quick Start"},{"location":"quick-start/#installation","text":"The recommended means of installation is using pip : pip install ioc-finder Alternatively, you can install ioc-finder as follows: git clone git@github.com:fhightower/ioc-finder.git && cd ioc-finder ; python setup.py install --user ;","title":"Installation"},{"location":"quick-start/#usage","text":"This package can be used in python or via a command-line interface .","title":"Usage"},{"location":"quick-start/#python","text":"The primary function in this package is the ioc_finder.find_iocs() function. A simple usage looks like: from ioc_finder import find_iocs text = \"This is just an example.com https://example.org/test/bingo.php\" iocs = find_iocs ( text ) print ( 'Domains: {} ' . format ( iocs [ 'domains' ])) print ( 'URLs: {} ' . format ( iocs [ 'urls' ]))","title":"Python"},{"location":"quick-start/#inputs","text":"You must pass some text into the find_iocs() function as string (the iocs will be parsed from this text). You can also provide the options detailed below.","title":"Inputs"},{"location":"quick-start/#options","text":"The find_iocs takes the following keywords (all of them default to True ): parse_domain_from_url (default=True): Whether or not to parse domain names from URLs (e.g. example.com from https://example.com/test ) parse_from_url_path (default=True): Whether or not to parse observables from URL paths (e.g. 2f3ec0e4998909bb0efab13c82d30708ca9f88679e42b75ef13ea0466951d862 from https://www.virustotal.com/gui/file/2f3ec0e4998909bb0efab13c82d30708ca9f88679e42b75ef13ea0466951d862/detection ) parse_domain_from_email_address (default=True): Whether or not to parse domain names from email addresses (e.g. example.com from foo@example.com ) parse_address_from_cidr (default=True): Whether or not to parse IP addresses from CIDR ranges (e.g. 0.0.0.1 from 0.0.0.1/24 ) parse_urls_without_scheme (default=True): Whether or not to parse URLs without a scheme (see https://en.wikipedia.org/wiki/Uniform_Resource_Identifier#Generic_syntax ) (e.g. hightower.space/projects ) parse_imphashes (default=True): Parse import hashes (which look like md5s, but are preceded by 'imphash' or 'import hash') parse_authentihashes (default=True): Parse authentihashes (which look like sha256s, but are preceded with 'authentihash') See test_ioc_finder.py for more examples.","title":"Options"},{"location":"quick-start/#output","text":"The find_iocs() returns a dictionary in the following structure: { \"asns\" : [], \"attack_mitigations\" : { \"enterprise\" : [], \"mobile\" : [] }, \"attack_tactics\" : { \"enterprise\" : [], \"mobile\" : [], \"pre_attack\" : [] }, \"attack_techniques\" : { \"enterprise\" : [], \"mobile\" : [], \"pre_attack\" : [] }, \"authentihashes\" : [], \"bitcoin_addresses\" : [], \"cves\" : [], \"domains\" : [], \"email_addresses\" : [], \"email_addresses_complete\" : [], \"file_paths\" : [], \"google_adsense_publisher_ids\" : [], \"google_analytics_tracker_ids\" : [], \"imphashes\" : [], \"ipv4_cidrs\" : [], \"ipv4s\" : [], \"ipv6s\" : [], \"mac_addresses\" : [], \"md5s\" : [], \"monero_addresses\" : [], \"registry_key_paths\" : [], \"sha1s\" : [], \"sha256s\" : [], \"sha512s\" : [], \"ssdeeps\" : [], \"tlp_labels\" : [], \"urls\" : [], \"user_agents\" : [], \"xmpp_addresses\" : [] } For example, running the example code shown at the start of the usage section above produces the following output: { \"asns\" : [], \"attack_mitigations\" : { \"enterprise\" : [], \"mobile\" : [] }, \"attack_tactics\" : { \"enterprise\" : [], \"mobile\" : [], \"pre_attack\" : [] }, \"attack_techniques\" : { \"enterprise\" : [], \"mobile\" : [], \"pre_attack\" : [] }, \"authentihashes\" : [], \"bitcoin_addresses\" : [], \"cves\" : [], \"domains\" : [ \"example.org\" , \"example.com\" ], \"email_addresses\" : [], \"email_addresses_complete\" : [], \"file_paths\" : [], \"google_adsense_publisher_ids\" : [], \"google_analytics_tracker_ids\" : [], \"imphashes\" : [], \"ipv4_cidrs\" : [], \"ipv4s\" : [], \"ipv6s\" : [], \"mac_addresses\" : [], \"md5s\" : [], \"monero_addresses\" : [], \"registry_key_paths\" : [], \"sha1s\" : [], \"sha256s\" : [], \"sha512s\" : [], \"ssdeeps\" : [], \"tlp_labels\" : [], \"urls\" : [ \"https://example.org/test/bingo.php\" ], \"user_agents\" : [], \"xmpp_addresses\" : [] }","title":"Output"},{"location":"quick-start/#output-details","text":"There are two grammars for email addresses. There is a fairly complete grammar to find email addresses matching the spec (which is very broad). Any of these complete email addresses (e.g. foo\"bar@gmail.com ) will be sent as output to in email_addresses_complete key. Email addresses in the simple form we are familiar with (e.g. bar@gmail.com ) will be sent as output in the email_addresses key.","title":"Output Details"},{"location":"quick-start/#parsing-specific-indicator-types","text":"If you need to parse a specific indicator type, you can do this using one of the parse functions that start with parse_ . For example, the code below will parse URLs: from ioc_finder import parse_urls text = 'https://google.com' results = parse_urls ( prepare_text ( text )) print ( results ) If you use a parse function for a specific indicator type, we recommend that you first call the prepare_text function which fangs (e.g. hXXps://example[.]com => https://example.com ) the text before parsing indicators from it. In the future, more functionality will be added to the prepare_text function making it advantageous to call this function before parsing indicators.","title":"Parsing Specific Indicator Types"},{"location":"quick-start/#command-line-interface","text":"The ioc-finder package can be used from a command line like: ioc-finder \"This is just an example.com https://example.org/test/bingo.php\" This will return: { \"asns\" : [], \"attack_mitigations\" : { \"enterprise\" : [], \"mobile\" : [] }, \"attack_tactics\" : { \"enterprise\" : [], \"mobile\" : [], \"pre_attack\" : [] }, \"attack_techniques\" : { \"enterprise\" : [], \"mobile\" : [], \"pre_attack\" : [] }, \"authentihashes\" : [], \"bitcoin_addresses\" : [], \"cves\" : [], \"domains\" : [ \"example.com\" , \"example.org\" ], \"email_addresses\" : [], \"email_addresses_complete\" : [], \"file_paths\" : [], \"google_adsense_publisher_ids\" : [], \"google_analytics_tracker_ids\" : [], \"imphashes\" : [], \"ipv4_cidrs\" : [], \"ipv4s\" : [], \"ipv6s\" : [], \"mac_addresses\" : [], \"md5s\" : [], \"monero_addresses\" : [], \"registry_key_paths\" : [], \"sha1s\" : [], \"sha256s\" : [], \"sha512s\" : [], \"ssdeeps\" : [], \"tlp_labels\" : [], \"urls\" : [ \"https://example.org/test/bingo.php\" ], \"user_agents\" : [], \"xmpp_addresses\" : [] } Here are the usage instructions for the CLI: Usage: ioc-finder [OPTIONS] TEXT CLI interface for parsing indicators of compromise. Options: --no_url_domain_parsing Using this flag will not parse domain names from URLs --no_email_addr_domain_parsing Using this flag will not parse domain names from email addresses --no_cidr_address_parsing Using this flag will not parse IP addresses from CIDR ranges --no_xmpp_addr_domain_parsing Using this flag will not parse domain names from XMPP addresses --help Show this message and exit.","title":"Command-Line Interface"}]}